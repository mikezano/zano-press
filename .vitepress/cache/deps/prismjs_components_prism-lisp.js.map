{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-lisp.js"],
  "sourcesContent": ["(function (Prism) {\n\t/**\n\t * Functions to construct regular expressions\n\t * e.g. (interactive ... or (interactive)\n\t *\n\t * @param {string} name\n\t * @returns {RegExp}\n\t */\n\tfunction simple_form(name) {\n\t\treturn RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source);\n\t}\n\t/**\n\t * booleans and numbers\n\t *\n\t * @param {string} pattern\n\t * @returns {RegExp}\n\t */\n\tfunction primitive(pattern) {\n\t\treturn RegExp(/([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source);\n\t}\n\n\t// Patterns in regular expressions\n\n\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n\t// & and : are excluded as they are usually used for special purposes\n\tvar symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source;\n\t// symbol starting with & used in function arguments\n\tvar marker = '&' + symbol;\n\t// Open parenthesis for look-behind\n\tvar par = '(\\\\()';\n\tvar endpar = '(?=\\\\))';\n\t// End the pattern with look-ahead space\n\tvar space = '(?=\\\\s)';\n\tvar nestedPar = /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/.source;\n\n\tvar language = {\n\t\t// Three or four semicolons are considered a heading.\n\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n\t\theading: {\n\t\t\tpattern: /;;;.*/,\n\t\t\talias: ['comment', 'title']\n\t\t},\n\t\tcomment: /;.*/,\n\t\tstring: {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,\n\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")\n\t\t\t}\n\t\t},\n\t\t'quoted-symbol': {\n\t\t\tpattern: RegExp(\"#?'\" + symbol),\n\t\t\talias: ['variable', 'symbol']\n\t\t},\n\t\t'lisp-property': {\n\t\t\tpattern: RegExp(':' + symbol),\n\t\t\talias: 'property'\n\t\t},\n\t\tsplice: {\n\t\t\tpattern: RegExp(',@?' + symbol),\n\t\t\talias: ['symbol', 'variable']\n\t\t},\n\t\tkeyword: [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar +\n\t\t\t\t\t\t'(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' +\n\t\t\t\t\t\tspace\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar + '(?:append|by|collect|concat|do|finally|for|in|return)' + space\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t],\n\t\tdeclare: {\n\t\t\tpattern: simple_form(/declare/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tinteractive: {\n\t\t\tpattern: simple_form(/interactive/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tboolean: {\n\t\t\tpattern: primitive(/nil|t/.source),\n\t\t\tlookbehind: true\n\t\t},\n\t\tnumber: {\n\t\t\tpattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n\t\t\tlookbehind: true\n\t\t},\n\t\tdefvar: {\n\t\t\tpattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^def[a-z]+/,\n\t\t\t\tvariable: RegExp(symbol)\n\t\t\t}\n\t\t},\n\t\tdefun: {\n\t\t\tpattern: RegExp(par + /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source + symbol + /\\s+\\(/.source + nestedPar + /\\)/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tfunction: {\n\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tlambda: {\n\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^lambda/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tcar: {\n\t\t\tpattern: RegExp(par + symbol),\n\t\t\tlookbehind: true\n\t\t},\n\t\tpunctuation: [\n\t\t\t// open paren, brackets, and close paren\n\t\t\t/(?:['`,]?\\(|[)\\[\\]])/,\n\t\t\t// cons\n\t\t\t{\n\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t]\n\t};\n\n\tvar arg = {\n\t\t'lisp-marker': RegExp(marker),\n\t\t'varform': {\n\t\t\tpattern: RegExp(/\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source),\n\t\t\tinside: language\n\t\t},\n\t\t'argument': {\n\t\t\tpattern: RegExp(/(^|[\\s(])/.source + symbol),\n\t\t\tlookbehind: true,\n\t\t\talias: 'variable'\n\t\t},\n\t\trest: language\n\t};\n\n\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n\n\tvar arglist = {\n\t\tpattern: RegExp(par + nestedPar + endpar),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'rest-vars': {\n\t\t\t\tpattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\t'other-marker-vars': {\n\t\t\t\tpattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\tkeys: {\n\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tpunctuation: /[()]/\n\t\t}\n\t};\n\n\tlanguage['lambda'].inside.arguments = arglist;\n\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);\n\tlanguage['defun'].inside.arguments.inside.sublist = arglist;\n\n\tPrism.languages.lisp = language;\n\tPrism.languages.elisp = language;\n\tPrism.languages.emacs = language;\n\tPrism.languages['emacs-lisp'] = language;\n}(Prism));\n"],
  "mappings": "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",
  "names": ["Prism"]
}
