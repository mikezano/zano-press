{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-wren.js"],
  "sourcesContent": ["// https://wren.io/\n\nPrism.languages.wren = {\n\t// Multiline comments in Wren can have nested multiline comments\n\t// Comments: // and /* */\n\t'comment': [\n\t\t{\n\t\t\t// support 3 levels of nesting\n\t\t\t// regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n\t\t\tpattern: /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\n\t// Triple quoted strings are multiline but cannot have interpolation (raw strings)\n\t// Based on prism-python.js\n\t'triple-quoted-string': {\n\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\n\t// see below\n\t'string-literal': null,\n\n\t// #!/usr/bin/env wren on the first line\n\t'hashbang': {\n\t\tpattern: /^#!\\/.+/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\n\t// Attributes are special keywords to add meta data to classes\n\t'attribute': {\n\t\t// #! attributes are stored in class properties\n\t\t// #!myvar = true\n\t\t// #attributes are not stored and dismissed at compilation\n\t\tpattern: /#!?[ \\t\\u3000]*\\w+/,\n\t\talias: 'keyword'\n\t},\n\t'class-name': [\n\t\t{\n\t\t\t// class definition\n\t\t\t// class Meta {}\n\t\t\tpattern: /(\\bclass\\s+)\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// A class must always start with an uppercase.\n\t\t// File.read\n\t\t/\\b[A-Z][a-z\\d_]*\\b/,\n\t],\n\n\t// A constant can be a variable, class, property or method. Just named in all uppercase letters\n\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/,\n\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t},\n\t'keyword': /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n\n\t// Functions can be Class.method()\n\t'function': /\\b[a-z_]\\w*(?=\\s*[({])/i,\n\n\t'operator': /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n\t'punctuation': /[\\[\\](){}.,;]/,\n};\n\nPrism.languages.wren['string-literal'] = {\n\t// A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n\tpattern: /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n\tlookbehind: true,\n\tgreedy: true,\n\tinside: {\n\t\t'interpolation': {\n\t\t\t// \"%(interpolation)\"\n\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'expression': {\n\t\t\t\t\tpattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: Prism.languages.wren\n\t\t\t\t},\n\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\tpattern: /^%\\(|\\)$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\t'string': /[\\s\\S]+/\n\t}\n};\n"],
  "mappings": ";AAEA,MAAM,UAAU,OAAO;AAAA;AAAA;AAAA,EAGtB,WAAW;AAAA,IACV;AAAA;AAAA;AAAA,MAGC,SAAS;AAAA,MACT,QAAQ;AAAA,IACT;AAAA,IACA;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,IACT;AAAA,EACD;AAAA;AAAA;AAAA,EAIA,wBAAwB;AAAA,IACvB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACR;AAAA;AAAA,EAGA,kBAAkB;AAAA;AAAA,EAGlB,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACR;AAAA;AAAA,EAGA,aAAa;AAAA;AAAA;AAAA;AAAA,IAIZ,SAAS;AAAA,IACT,OAAO;AAAA,EACR;AAAA,EACA,cAAc;AAAA,IACb;AAAA;AAAA;AAAA,MAGC,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA;AAAA;AAAA,IAGA;AAAA,EACD;AAAA;AAAA,EAGA,YAAY;AAAA,EAEZ,QAAQ;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,EACR;AAAA,EACA,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA;AAAA,EAGV,YAAY;AAAA,EAEZ,YAAY;AAAA,EACZ,eAAe;AAChB;AAEA,MAAM,UAAU,KAAK,gBAAgB,IAAI;AAAA;AAAA,EAExC,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,QAAQ;AAAA,IACP,iBAAiB;AAAA;AAAA,MAEhB,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,QACP,cAAc;AAAA,UACb,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,QAAQ,MAAM,UAAU;AAAA,QACzB;AAAA,QACA,6BAA6B;AAAA,UAC5B,SAAS;AAAA,UACT,OAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA,IACA,UAAU;AAAA,EACX;AACD;",
  "names": []
}
