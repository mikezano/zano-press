{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-kumir.js"],
  "sourcesContent": ["/* eslint-disable regexp/no-dupe-characters-character-class */\n(function (Prism) {\n\n\t/**\n\t * Regular expression for characters that are not allowed in identifiers.\n\t *\n\t * @type {string}\n\t */\n\tvar nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n\n\t/**\n\t * Surround a regular expression for IDs with patterns for non-ID sequences.\n\t *\n\t * @param {string} pattern A regular expression for identifiers.\n\t * @param {string} [flags] The regular expression flags.\n\t * @returns {RegExp} A wrapped regular expression for identifiers.\n\t */\n\tfunction wrapId(pattern, flags) {\n\t\treturn RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n\t}\n\n\tPrism.languages.kumir = {\n\t\t'comment': {\n\t\t\tpattern: /\\|.*/\n\t\t},\n\n\t\t'prolog': {\n\t\t\tpattern: /#.*/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t'string': {\n\t\t\tpattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t'boolean': {\n\t\t\tpattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'operator-word': {\n\t\t\tpattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'system-variable': {\n\t\t\tpattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'type': [\n\t\t\t{\n\t\t\t\tpattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'builtin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'important'\n\t\t\t}\n\t\t],\n\n\t\t/**\n\t\t * Should be performed after searching for type names because of \"таб\".\n\t\t * \"таб\" is a reserved word, but never used without a preceding type name.\n\t\t * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n\t\t */\n\t\t'keyword': {\n\t\t\tpattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t/** Should be performed after searching for reserved words. */\n\t\t'name': {\n\t\t\t// eslint-disable-next-line regexp/no-super-linear-backtracking\n\t\t\tpattern: wrapId(/(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t/** Should be performed after searching for names. */\n\t\t'number': {\n\t\t\tpattern: wrapId(/(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source, 'i'),\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t/** Should be performed after searching for words. */\n\t\t'punctuation': /:=|[(),:;\\[\\]]/,\n\n\t\t/**\n\t\t * Should be performed after searching for\n\t\t * - numeric constants (because of \"+\" and \"-\");\n\t\t * - punctuation marks (because of \":=\" and \"=\").\n\t\t */\n\t\t'operator-char': {\n\t\t\tpattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n\t\t\talias: 'operator'\n\t\t}\n\t};\n\n\tPrism.languages.kum = Prism.languages.kumir;\n\n}(Prism));\n"],
  "mappings": ";CACC,SAAUA,QAAO;AAOjB,MAAI,QAAQ,sDAAsD;AASlE,WAAS,OAAO,SAAS,OAAO;AAC/B,WAAO,OAAO,QAAQ,QAAQ,YAAY,KAAK,GAAG,KAAK;AAAA,EACxD;AAEA,EAAAA,OAAM,UAAU,QAAQ;AAAA,IACvB,WAAW;AAAA,MACV,SAAS;AAAA,IACV;AAAA,IAEA,UAAU;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,IACT;AAAA,IAEA,UAAU;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,IACT;AAAA,IAEA,WAAW;AAAA,MACV,SAAS,OAAO,yCAAyC,MAAM;AAAA,MAC/D,YAAY;AAAA,IACb;AAAA,IAEA,iBAAiB;AAAA,MAChB,SAAS,OAAO,2CAA2C,MAAM;AAAA,MACjE,YAAY;AAAA,MACZ,OAAO;AAAA,IACR;AAAA,IAEA,mBAAmB;AAAA,MAClB,SAAS,OAAO,mCAAmC,MAAM;AAAA,MACzD,YAAY;AAAA,MACZ,OAAO;AAAA,IACR;AAAA,IAEA,QAAQ;AAAA,MACP;AAAA,QACC,SAAS,OAAO,mEAAmE,MAAM;AAAA,QACzF,YAAY;AAAA,QACZ,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,SAAS,OAAO,0DAA0D,MAAM;AAAA,QAChF,YAAY;AAAA,QACZ,OAAO;AAAA,MACR;AAAA,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,WAAW;AAAA,MACV,SAAS,OAAO,qPAAqP,MAAM;AAAA,MAC3Q,YAAY;AAAA,IACb;AAAA;AAAA,IAGA,QAAQ;AAAA;AAAA,MAEP,SAAS,OAAO,2EAA2E,MAAM;AAAA,MACjG,YAAY;AAAA,IACb;AAAA;AAAA,IAGA,UAAU;AAAA,MACT,SAAS,OAAO,2FAA2F,QAAQ,GAAG;AAAA,MACtH,YAAY;AAAA,IACb;AAAA;AAAA,IAGA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOf,iBAAiB;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,EACD;AAEA,EAAAA,OAAM,UAAU,MAAMA,OAAM,UAAU;AAEvC,GAAE,KAAK;",
  "names": ["Prism"]
}
