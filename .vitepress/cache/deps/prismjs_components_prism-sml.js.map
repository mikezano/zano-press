{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-sml.js"],
  "sourcesContent": ["// https://smlfamily.github.io/sml97-defn.pdf\n// https://people.mpi-sws.org/~rossberg/sml.html\n(function (Prism) {\n\n\tvar keywords = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n\n\tPrism.languages.sml = {\n\t\t// allow one level of nesting\n\t\t'comment': /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n\t\t'string': {\n\t\t\tpattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true\n\t\t},\n\n\t\t'class-name': [\n\t\t\t{\n\t\t\t\t// This is only an approximation since the real grammar is context-free\n\t\t\t\t//\n\t\t\t\t// Why the main loop so complex?\n\t\t\t\t// The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n\t\t\t\t// simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n\t\t\t\t// followed by a long identifier.\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t/((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n\t\t\t\t\t\t.replace(/<NOT-LAST>/g, function () { return /\\s*(?:[*,]|->)/.source; })\n\t\t\t\t\t\t.replace(/<TERMINAL>/g, function () {\n\t\t\t\t\t\t\treturn /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/.source;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.replace(/<LONG-ID>/g, function () { return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source; })\n\t\t\t\t\t\t.replace(/<KEYWORD>/g, function () { return keywords.source; }),\n\t\t\t\t\t'i'\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'function': {\n\t\t\tpattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'keyword': keywords,\n\t\t'variable': {\n\t\t\tpattern: /(^|[^\\w'])'[\\w']*/,\n\t\t\tlookbehind: true,\n\t\t},\n\n\t\t'number': /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n\t\t'word': {\n\t\t\tpattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n\t\t\talias: 'constant'\n\t\t},\n\n\t\t'boolean': /\\b(?:false|true)\\b/i,\n\t\t'operator': /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n\t\t'punctuation': /[(){}\\[\\].:,;]/\n\t};\n\n\tPrism.languages.sml['class-name'][0].inside = Prism.languages.sml;\n\n\tPrism.languages.smlnj = Prism.languages.sml;\n\n}(Prism));\n"],
  "mappings": ";CAEC,SAAUA,QAAO;AAEjB,MAAI,WAAW;AAEf,EAAAA,OAAM,UAAU,MAAM;AAAA;AAAA,IAErB,WAAW;AAAA,IACX,UAAU;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,IACT;AAAA,IAEA,cAAc;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOC,SAAS;AAAA,UACR,2HAA2H,OACzH,QAAQ,eAAe,WAAY;AAAE,mBAAO,iBAAiB;AAAA,UAAQ,CAAC,EACtE,QAAQ,eAAe,WAAY;AACnC,mBAAO,6FAA6F;AAAA,UACrG,CAAC,EACA,QAAQ,cAAc,WAAY;AAAE,mBAAO,+BAA+B;AAAA,UAAQ,CAAC,EACnF,QAAQ,cAAc,WAAY;AAAE,mBAAO,SAAS;AAAA,UAAQ,CAAC;AAAA,UAC/D;AAAA,QACD;AAAA,QACA,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,QAAQ;AAAA;AAAA,MACT;AAAA,MACA;AAAA,QACC,SAAS;AAAA,QACT,YAAY;AAAA,MACb;AAAA,IACD;AAAA,IACA,YAAY;AAAA,MACX,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IAEA,WAAW;AAAA,IACX,YAAY;AAAA,MACX,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IAEA,UAAU;AAAA,IACV,QAAQ;AAAA,MACP,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,eAAe;AAAA,EAChB;AAEA,EAAAA,OAAM,UAAU,IAAI,YAAY,EAAE,CAAC,EAAE,SAASA,OAAM,UAAU;AAE9D,EAAAA,OAAM,UAAU,QAAQA,OAAM,UAAU;AAEzC,GAAE,KAAK;",
  "names": ["Prism"]
}
