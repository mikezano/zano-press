{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-http.js"],
  "sourcesContent": ["(function (Prism) {\n\n\t/**\n\t * @param {string} name\n\t * @returns {RegExp}\n\t */\n\tfunction headerValueOf(name) {\n\t\treturn RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n\t}\n\n\tPrism.languages.http = {\n\t\t'request-line': {\n\t\t\tpattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Method\n\t\t\t\t'method': {\n\t\t\t\t\tpattern: /^[A-Z]+\\b/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Request Target e.g. http://example.com, /path/to/file\n\t\t\t\t'request-target': {\n\t\t\t\t\tpattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'url',\n\t\t\t\t\tinside: Prism.languages.uri\n\t\t\t\t},\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^(\\s)HTTP\\/[\\d.]+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\t'response-status': {\n\t\t\tpattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Version\n\t\t\t\t'http-version': {\n\t\t\t\t\tpattern: /^HTTP\\/[\\d.]+/,\n\t\t\t\t\talias: 'property'\n\t\t\t\t},\n\t\t\t\t// Status Code\n\t\t\t\t'status-code': {\n\t\t\t\t\tpattern: /^(\\s)\\d+(?=\\s)/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'number'\n\t\t\t\t},\n\t\t\t\t// Reason Phrase\n\t\t\t\t'reason-phrase': {\n\t\t\t\t\tpattern: /^(\\s).+/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'header': {\n\t\t\tpattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n\t\t\tinside: {\n\t\t\t\t'header-value': [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Content-Security-Policy/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['csp', 'languages-csp'],\n\t\t\t\t\t\tinside: Prism.languages.csp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hpkp', 'languages-hpkp'],\n\t\t\t\t\t\tinside: Prism.languages.hpkp\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/Strict-Transport-Security/.source),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: ['hsts', 'languages-hsts'],\n\t\t\t\t\t\tinside: Prism.languages.hsts\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: headerValueOf(/[^:]+/.source),\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'header-name': {\n\t\t\t\t\tpattern: /^[^:]+/,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'punctuation': /^:/\n\t\t\t}\n\t\t}\n\t};\n\n\t// Create a mapping of Content-Type headers to language definitions\n\tvar langs = Prism.languages;\n\tvar httpLanguages = {\n\t\t'application/javascript': langs.javascript,\n\t\t'application/json': langs.json || langs.javascript,\n\t\t'application/xml': langs.xml,\n\t\t'text/xml': langs.xml,\n\t\t'text/html': langs.html,\n\t\t'text/css': langs.css,\n\t\t'text/plain': langs.plain\n\t};\n\n\t// Declare which types can also be suffixes\n\tvar suffixTypes = {\n\t\t'application/json': true,\n\t\t'application/xml': true\n\t};\n\n\t/**\n\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t *\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tfunction getSuffixPattern(contentType) {\n\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');\n\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';\n\t}\n\n\t// Insert each content type parser that has its associated language\n\t// currently loaded.\n\tvar options;\n\tfor (var contentType in httpLanguages) {\n\t\tif (httpLanguages[contentType]) {\n\t\t\toptions = options || {};\n\n\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n\t\t\toptions[contentType.replace(/\\//g, '-')] = {\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\t'(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' +\n\t\t\t\t\t// This is a little interesting:\n\t\t\t\t\t// The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n\t\t\t\t\t// However, when writing code by hand (e.g. to display on a website) people can forget about this,\n\t\t\t\t\t// so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n\t\t\t\t\t// the body does not start with a [\\w-] character (as headers do).\n\t\t\t\t\t/[^ \\t\\w-][\\s\\S]*/.source,\n\t\t\t\t\t'i'\n\t\t\t\t),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: httpLanguages[contentType]\n\t\t\t};\n\t\t}\n\t}\n\tif (options) {\n\t\tPrism.languages.insertBefore('http', 'header', options);\n\t}\n\n}(Prism));\n"],
  "mappings": "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",
  "names": ["Prism", "contentType"]
}
