{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-parigp.js"],
  "sourcesContent": ["Prism.languages.parigp = {\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n\t\tgreedy: true\n\t},\n\t// PARI/GP does not care about white spaces at all\n\t// so let's process the keywords to build an appropriate regexp\n\t// (e.g. \"b *r *e *a *k\", etc.)\n\t'keyword': (function () {\n\t\tvar keywords = [\n\t\t\t'breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x',\n\t\t\t'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime',\n\t\t\t'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if',\n\t\t\t'local', 'my', 'next', 'return', 'until', 'while'\n\t\t];\n\t\tkeywords = keywords.map(function (keyword) {\n\t\t\treturn keyword.split('').join(' *');\n\t\t}).join('|');\n\t\treturn RegExp('\\\\b(?:' + keywords + ')\\\\b');\n\t}()),\n\t'function': /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n\t'number': {\n\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator\n\t\tpattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n\t\tlookbehind: true\n\t},\n\t'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n\t'punctuation': /[\\[\\]{}().,:;|]/\n};\n"],
  "mappings": ";AAAA,MAAM,UAAU,SAAS;AAAA,EACxB,WAAW;AAAA,EACX,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,WAAY,WAAY;AACvB,QAAI,WAAW;AAAA,MACd;AAAA,MAAc;AAAA,MAAS;AAAA,MAAY;AAAA,MAAW;AAAA,MAAU;AAAA,MACxD;AAAA,MAAgB;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAC/C;AAAA,MAAW;AAAA,MAAe;AAAA,MAAU;AAAA,MAAO;AAAA,MAAS;AAAA,MACpD;AAAA,MAAS;AAAA,MAAM;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,IAC3C;AACA,eAAW,SAAS,IAAI,SAAU,SAAS;AAC1C,aAAO,QAAQ,MAAM,EAAE,EAAE,KAAK,IAAI;AAAA,IACnC,CAAC,EAAE,KAAK,GAAG;AACX,WAAO,OAAO,WAAW,WAAW,MAAM;AAAA,EAC3C,EAAE;AAAA,EACF,YAAY;AAAA,EACZ,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,YAAY;AAAA,EACb;AAAA,EACA,YAAY;AAAA,EACZ,eAAe;AAChB;",
  "names": []
}
