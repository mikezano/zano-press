{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-odin.js"],
  "sourcesContent": ["(function (Prism) {\n\tvar escapes = /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/;\n\n\tPrism.languages.odin = {\n\t\t/**\n\t\t * The current implementation supports only 1 level of nesting.\n\t\t *\n\t\t * @author Michael Schmidt\n\t\t * @author edukisto\n\t\t */\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /#![^\\n\\r]*/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\/\\/[^\\n\\r]*/,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\n\t\t/**\n\t\t * Should be found before strings because of '\"'\"- and '`'`-like sequences.\n\t\t */\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'symbol': escapes\n\t\t\t}\n\t\t},\n\n\t\t'string': [\n\t\t\t{\n\t\t\t\tpattern: /`[^`]*`/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'symbol': escapes\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\n\t\t'directive': {\n\t\t\tpattern: /#\\w+/,\n\t\t\talias: 'property'\n\t\t},\n\n\t\t'number': /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n\n\t\t'discard': {\n\t\t\tpattern: /\\b_\\b/,\n\t\t\talias: 'keyword'\n\t\t},\n\n\t\t'procedure-definition': {\n\t\t\tpattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t'keyword': /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n\n\t\t/**\n\t\t * false, nil, true can be used as procedure names. \"_\" and keywords can't.\n\t\t */\n\t\t'procedure-name': {\n\t\t\tpattern: /\\b\\w+(?=[ \\t]*\\()/,\n\t\t\talias: 'function'\n\t\t},\n\n\t\t'boolean': /\\b(?:false|nil|true)\\b/,\n\n\t\t'constant-parameter-sign': {\n\t\t\tpattern: /\\$/,\n\t\t\talias: 'important'\n\t\t},\n\n\t\t'undefined': {\n\t\t\tpattern: /---/,\n\t\t\talias: 'operator'\n\t\t},\n\n\t\t'arrow': {\n\t\t\tpattern: /->/,\n\t\t\talias: 'punctuation'\n\t\t},\n\n\t\t'operator': /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n\n\t\t'punctuation': /[(),.:;@\\[\\]{}]/\n\t};\n}(Prism));\n"],
  "mappings": ";CAAC,SAAUA,QAAO;AACjB,MAAI,UAAU;AAEd,EAAAA,OAAM,UAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOtB,WAAW;AAAA,MACV;AAAA,QACC,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,MACA;AAAA,QACC,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,MACA;AAAA,QACC,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,IACD;AAAA;AAAA;AAAA;AAAA,IAKA,QAAQ;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,QACP,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IAEA,UAAU;AAAA,MACT;AAAA,QACC,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,MACA;AAAA,QACC,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,UACP,UAAU;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA,IAEA,aAAa;AAAA,MACZ,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,UAAU;AAAA,IAEV,WAAW;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,wBAAwB;AAAA,MACvB,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,WAAW;AAAA;AAAA;AAAA;AAAA,IAKX,kBAAkB;AAAA,MACjB,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,WAAW;AAAA,IAEX,2BAA2B;AAAA,MAC1B,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,aAAa;AAAA,MACZ,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,SAAS;AAAA,MACR,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IAEA,YAAY;AAAA,IAEZ,eAAe;AAAA,EAChB;AACD,GAAE,KAAK;",
  "names": ["Prism"]
}
