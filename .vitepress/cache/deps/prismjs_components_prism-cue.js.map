{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-cue.js"],
  "sourcesContent": ["(function (Prism) {\n\n\t// https://cuelang.org/docs/references/spec/\n\n\t// eslint-disable-next-line regexp/strict\n\tvar stringEscape = /\\\\(?:(?!\\2)|\\2(?:[^()\\r\\n]|\\([^()]*\\)))/.source;\n\t// eslint-disable-next-line regexp/strict\n\tvar stringTypes = /\"\"\"(?:[^\\\\\"]|\"(?!\"\"\\2)|<esc>)*\"\"\"/.source +\n\t\t// eslint-disable-next-line regexp/strict\n\t\t'|' + /'''(?:[^\\\\']|'(?!''\\2)|<esc>)*'''/.source +\n\t\t// eslint-disable-next-line regexp/strict\n\t\t'|' + /\"(?:[^\\\\\\r\\n\"]|\"(?!\\2)|<esc>)*\"/.source +\n\t\t// eslint-disable-next-line regexp/strict\n\t\t'|' + /'(?:[^\\\\\\r\\n']|'(?!\\2)|<esc>)*'/.source;\n\tvar stringLiteral = '(?:' + stringTypes.replace(/<esc>/g, stringEscape) + ')';\n\n\tPrism.languages.cue = {\n\t\t'comment': {\n\t\t\tpattern: /\\/\\/.*/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'string-literal': {\n\t\t\t// eslint-disable-next-line regexp/strict\n\t\t\tpattern: RegExp(/(^|[^#\"'\\\\])(#*)/.source + stringLiteral + /(?![\"'])\\2/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t// I'm using dirty hack here. We have to know the number hashes at the start of the string somehow,\n\t\t\t\t// but we can't look back. So instead, we will use a lookahead, go to the end of the string, and\n\t\t\t\t// capture the hashes at the end of the string.\n\t\t\t\t'escape': {\n\t\t\t\t\tpattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1(?:U[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{1,4}|x[a-fA-F0-9]{1,2}|\\d{2,3}|[^(])/,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\talias: 'string'\n\t\t\t\t},\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1\\([^()]*\\)/,\n\t\t\t\t\tgreedy: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^\\\\#*\\(|\\)$/,\n\t\t\t\t\t\t'expression': {\n\t\t\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\t\t\tinside: null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\n\t\t'keyword': {\n\t\t\tpattern: /(^|[^\\w$])(?:for|if|import|in|let|null|package)(?![\\w$])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[^\\w$])(?:false|true)(?![\\w$])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'builtin': {\n\t\t\tpattern: /(^|[^\\w$])(?:bool|bytes|float|float(?:32|64)|u?int(?:8|16|32|64|128)?|number|rune|string)(?![\\w$])/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'attribute': {\n\t\t\tpattern: /@[\\w$]+(?=\\s*\\()/,\n\t\t\talias: 'function'\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /(^|[^\\w$])[a-z_$][\\w$]*(?=\\s*\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'number': {\n\t\t\tpattern: /(^|[^\\w$.])(?:0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[eE][+-]?\\d+(?:_\\d+)*)?(?:[KMGTP]i?)?)(?![\\w$])/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t'operator': /\\.{3}|_\\|_|&&?|\\|\\|?|[=!]~|[<>=!]=?|[+\\-*/?]/,\n\t\t'punctuation': /[()[\\]{},.:]/\n\t};\n\n\tPrism.languages.cue['string-literal'].inside.interpolation.inside.expression.inside = Prism.languages.cue;\n\n}(Prism));\n"],
  "mappings": ";CAAC,SAAUA,QAAO;AAKjB,MAAI,eAAe,0CAA0C;AAE7D,MAAI,cAAc,oCAAoC;AAAA,EAErD,MAAM,oCAAoC;AAAA,EAE1C,MAAM,kCAAkC;AAAA,EAExC,MAAM,kCAAkC;AACzC,MAAI,gBAAgB,QAAQ,YAAY,QAAQ,UAAU,YAAY,IAAI;AAE1E,EAAAA,OAAM,UAAU,MAAM;AAAA,IACrB,WAAW;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,IACT;AAAA,IACA,kBAAkB;AAAA;AAAA,MAEjB,SAAS,OAAO,mBAAmB,SAAS,gBAAgB,aAAa,MAAM;AAAA,MAC/E,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,QAAQ;AAAA;AAAA;AAAA;AAAA,QAIP,UAAU;AAAA,UACT,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,OAAO;AAAA,QACR;AAAA,QACA,iBAAiB;AAAA,UAChB,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,YACP,eAAe;AAAA,YACf,cAAc;AAAA,cACb,SAAS;AAAA,cACT,QAAQ;AAAA,YACT;AAAA,UACD;AAAA,QACD;AAAA,QACA,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IAEA,WAAW;AAAA,MACV,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IACA,WAAW;AAAA,MACV,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IACA,WAAW;AAAA,MACV,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IAEA,aAAa;AAAA,MACZ,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IACA,YAAY;AAAA,MACX,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IAEA,UAAU;AAAA,MACT,SAAS;AAAA,MACT,YAAY;AAAA,IACb;AAAA,IAEA,YAAY;AAAA,IACZ,eAAe;AAAA,EAChB;AAEA,EAAAA,OAAM,UAAU,IAAI,gBAAgB,EAAE,OAAO,cAAc,OAAO,WAAW,SAASA,OAAM,UAAU;AAEvG,GAAE,KAAK;",
  "names": ["Prism"]
}
