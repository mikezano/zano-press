{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-dart.js"],
  "sourcesContent": ["(function (Prism) {\n\tvar keywords = [\n\t\t/\\b(?:async|sync|yield)\\*/,\n\t\t/\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n\t];\n\n\t// Handles named imports, such as http.Client\n\tvar packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the dart naming conventions\n\tvar className = {\n\t\tpattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t};\n\n\tPrism.languages.dart = Prism.languages.extend('clike', {\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables and parameters\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'operator': /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n\t});\n\n\tPrism.languages.insertBefore('dart', 'string', {\n\t\t'string-literal': {\n\t\t\tpattern: /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': {\n\t\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^\\$\\{?|\\}$/,\n\t\t\t\t\t\t'expression': {\n\t\t\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\t\t\tinside: Prism.languages.dart\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'string': /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'string': undefined\n\t});\n\n\tPrism.languages.insertBefore('dart', 'class-name', {\n\t\t'metadata': {\n\t\t\tpattern: /@\\w+/,\n\t\t\talias: 'function'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('dart', 'class-name', {\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t});\n}(Prism));\n"],
  "mappings": ";CAAC,SAAUA,QAAO;AACjB,MAAI,WAAW;AAAA,IACd;AAAA,IACA;AAAA,EACD;AAGA,MAAI,gBAAgB,uDAAuD;AAG3E,MAAI,YAAY;AAAA,IACf,SAAS,OAAO,gBAAgB,gCAAgC,MAAM;AAAA,IACtE,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,aAAa;AAAA,QACZ,SAAS;AAAA,QACT,QAAQ;AAAA,UACP,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,EAAAA,OAAM,UAAU,OAAOA,OAAM,UAAU,OAAO,SAAS;AAAA,IACtD,cAAc;AAAA,MACb;AAAA,MACA;AAAA;AAAA;AAAA,QAGC,SAAS,OAAO,gBAAgB,+BAA+B,MAAM;AAAA,QACrE,YAAY;AAAA,QACZ,QAAQ,UAAU;AAAA,MACnB;AAAA,IACD;AAAA,IACA,WAAW;AAAA,IACX,YAAY;AAAA,EACb,CAAC;AAED,EAAAA,OAAM,UAAU,aAAa,QAAQ,UAAU;AAAA,IAC9C,kBAAkB;AAAA,MACjB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,QACP,iBAAiB;AAAA,UAChB,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,QAAQ;AAAA,YACP,eAAe;AAAA,YACf,cAAc;AAAA,cACb,SAAS;AAAA,cACT,QAAQA,OAAM,UAAU;AAAA,YACzB;AAAA,UACD;AAAA,QACD;AAAA,QACA,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,UAAU;AAAA,EACX,CAAC;AAED,EAAAA,OAAM,UAAU,aAAa,QAAQ,cAAc;AAAA,IAClD,YAAY;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,IACR;AAAA,EACD,CAAC;AAED,EAAAA,OAAM,UAAU,aAAa,QAAQ,cAAc;AAAA,IAClD,YAAY;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,QACP,cAAc;AAAA,QACd,WAAW;AAAA,QACX,eAAe;AAAA,QACf,YAAY;AAAA,MACb;AAAA,IACD;AAAA,EACD,CAAC;AACF,GAAE,KAAK;",
  "names": ["Prism"]
}
