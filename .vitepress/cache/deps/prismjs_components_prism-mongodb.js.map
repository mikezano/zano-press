{
  "version": 3,
  "sources": ["../../../node_modules/prismjs/components/prism-mongodb.js"],
  "sourcesContent": ["(function (Prism) {\n\n\tvar operators = [\n\t\t// query and projection\n\t\t'$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or',\n\t\t'$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects',\n\t\t'$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet',\n\t\t'$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice',\n\n\t\t// update\n\t\t'$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset',\n\t\t'$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit',\n\n\t\t// aggregation pipeline stages\n\t\t'$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear',\n\t\t'$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup',\n\t\t'$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith',\n\t\t'$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields',\n\n\t\t// aggregation pipeline operators\n\t\t'$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and',\n\t\t'$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2',\n\t\t'$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond',\n\t\t'$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth',\n\t\t'$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first',\n\t\t'$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes',\n\t\t'$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last',\n\t\t'$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max',\n\t\t'$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne',\n\t\t'$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce',\n\t\t'$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round',\n\t\t'$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion',\n\t\t'$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes',\n\t\t'$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan',\n\t\t'$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString',\n\t\t'$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd',\n\t\t'$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField',\n\n\t\t// aggregation pipeline query modifiers\n\t\t'$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query',\n\t\t'$returnKey', '$showDiskLoc', '$natural',\n\t];\n\n\tvar builtinFunctions = [\n\t\t'ObjectId',\n\t\t'Code',\n\t\t'BinData',\n\t\t'DBRef',\n\t\t'Timestamp',\n\t\t'NumberLong',\n\t\t'NumberDecimal',\n\t\t'MaxKey',\n\t\t'MinKey',\n\t\t'RegExp',\n\t\t'ISODate',\n\t\t'UUID',\n\t];\n\n\toperators = operators.map(function (operator) {\n\t\treturn operator.replace('$', '\\\\$');\n\t});\n\n\tvar operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n\n\tPrism.languages.mongodb = Prism.languages.extend('javascript', {});\n\n\tPrism.languages.insertBefore('mongodb', 'string', {\n\t\t'property': {\n\t\t\tpattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.mongodb.string.inside = {\n\t\turl: {\n\t\t\t// url pattern\n\t\t\tpattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n\t\t\tgreedy: true\n\t\t},\n\t\tentity: {\n\t\t\t// ipv4\n\t\t\tpattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n\t\t\tgreedy: true\n\t\t}\n\t};\n\n\tPrism.languages.insertBefore('mongodb', 'constant', {\n\t\t'builtin': {\n\t\t\tpattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n\t\t\talias: 'keyword'\n\t\t}\n\t});\n\n}(Prism));\n"],
  "mappings": "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",
  "names": ["Prism"]
}
